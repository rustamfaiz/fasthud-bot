import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ù–û–ü–ö–ò ---
start_keyboard = InlineKeyboardMarkup(row_width=1)
start_keyboard.add(
    InlineKeyboardButton("üí∏ –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="get_book"),
    InlineKeyboardButton("üéØ –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–∑ —ç—Ç–æ–π –∫–Ω–∏–≥–∏", callback_data="about_book")
)

back_keyboard = InlineKeyboardMarkup()
back_keyboard.add(
    InlineKeyboardButton("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_start")
)

# --- –¢–ï–ö–°–¢–´ ---
start_text = (
    "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é.\n"
    "–ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞. –ù–æ–≤—ã–π –∑–∞—Ö–æ–¥. –û—á–µ—Ä–µ–¥–Ω–æ–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤ –∂–∏—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—ë –µ—â—ë —Å —Ç–æ–±–æ–π.\n\n"
    "–î–∞–≤–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —É —Ç–µ–±—è —É–∂–µ –±—ã–ª–∏ –¥–∏–µ—Ç—ã, –±—ã–ª –±–µ–≥, –±—ã–ª–∞ –Ω–∞–¥–µ–∂–¥–∞ —É–≤–∏–¥–µ—Ç—å –ø–ª–æ—Å–∫–∏–π –∂–∏–≤–æ—Ç ‚Äî —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑, –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
    "–ù–æ –≤–º–µ—Å—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —Å–Ω–æ–≤–∞ —Ü–∏—Ñ—Ä—ã —Ç—É–¥–∞-—Å—é–¥–∞. –ò —Å–Ω–æ–≤–∞ –Ω–∏—á–µ–≥–æ.\n\n"
    "–ü—Ä–∏–≤–µ—Ç. –ú–µ–Ω—è –∑–æ–≤—É—Ç –†—É—Å—Ç–∞–º.\n"
    "–í 2019 –≥–æ–¥—É —è —Å–∂—ë–≥ –¥–≤–∞–¥—Ü–∞—Ç—å –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤ ‚Äî —á–µ—Ä–µ–∑ –≥–æ–ª–æ–¥, –±–µ–≥, –ø–æ–ª–Ω–æ–µ –æ—Ç—Ä–µ—á–µ–Ω–∏–µ –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ, –º—É—á–Ω–æ–≥–æ –∏ –∂–∏–∑–Ω–∏.\n"
    "–ù–∞—Å—Ç–æ–ª—å–∫–æ —É—à—ë–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ —Ä–∞–∑–æ–±—Ä–∞–ª —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—é, –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –º–µ—Ö–∞–Ω–∏–∫—É –¥–æ –∫–æ—Å—Ç–µ–π.\n"
    "–ü–æ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞–±–∏—Ä–∞–ª –∂–∏—Ä ‚Äî –∏ —Å–∂–∏–≥–∞–ª –µ–≥–æ —Å–Ω–æ–≤–∞. –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –°–∏—Å—Ç–µ–º–Ω–æ. –ë–µ–∑ –≥–æ–ª–æ–¥–∞, –±–µ–≥–∞ –∏ —Å–æ –≤–∫—É—Å–æ–º –∂–∏–∑–Ω–∏. –ó–∞ 4 –º–µ—Å—è—Ü–∞.\n\n"
    "–¢–∞–∫ –∏ –ø–æ—è–≤–∏–ª–∞—Å—å —ç—Ç–∞ –∫–Ω–∏–≥–∞.\n"
    "–ù–µ –∏–∑ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –ê –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –±–æ—Ä—å–±–µ —Å —Ñ–∏—Ç–Ω–µ—Å-–º–∏—Ñ–∞–º–∏ –∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ä–∏—Ç—É–∞–ª–∞–º–∏.\n\n"
    "–≠—Ç–æ –Ω–µ –ø—Ä–æ –º–æ—Ç–∏–≤–∞—Ü–∏—é. –≠—Ç–æ –ø—Ä–æ –º–µ—Ç–æ–¥.\n"
    "–ö–∞–∫ –∑–∞ 4 –º–µ—Å—è—Ü–∞ —É–±—Ä–∞—Ç—å –∂–∏—Ä ‚Äî –∏ –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–¥–∞."
)

about_text = (
    "–≠—Ç–æ –Ω–µ –∫–Ω–∏–≥–∞ –ø—Ä–æ ‚Äú–∂–∏—Ç—å –±–µ–∑ —Å–∞—Ö–∞—Ä–∞‚Äù –∏ ‚Äú–≤–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è‚Äù.\n"
    "–≠—Ç–æ ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É—Å—Ç–∞–ª –Ω–∞—á–∏–Ω–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.\n\n"
    "–í–æ—Ç, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:\n"
    "‚Äî –í—Å—é –ø—Ä–∞–≤–¥—É –æ –¥–∏–µ—Ç–∞—Ö –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –ø—Ä–æ–≤–∞–ª–æ–º\n"
    "‚Äî –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω, –∫–∞–∫ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∂–∏—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—à—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
    "‚Äî –°–∏—Å—Ç–µ–º—É –ø–∏—Ç–∞–Ω–∏—è –±–µ–∑ –≥–æ–ª–æ–¥–∞, —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –µ–¥–æ–π\n"
    "‚Äî –û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∂–∏—Ä –∏ –ø–æ—á–µ–º—É ¬´–ü–ü¬ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    "‚Äî –ü—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ 4 –º–µ—Å—è—Ü–∞, –≥–¥–µ –∂–∏—Ä –≥–æ—Ä–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å–ø–∏—à—å\n"
    "‚Äî –§–æ—Ä–º—É–ª—É, –∫–∞–∫ —É–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø—Ä–µ–∂–Ω–µ–º—É —Ç–µ–ª—É\n"
    "‚Äî –ù–æ–≤–æ–µ —Ç–µ–ª–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –¥–∞–∂–µ –Ω–µ –º–µ—á—Ç–∞–ª\n\n"
    "–í—Å—ë, —á—Ç–æ –º–µ—à–∞–ª–æ ‚Äî —Ä–∞–∑–æ–±—Ä–∞–Ω–æ. –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî —Å–æ–±—Ä–∞–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å."
)

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(start_text, reply_markup=start_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'about_book')
async def process_about(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, about_text, reply_markup=back_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'back_to_start')
async def process_back(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, start_text, reply_markup=start_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'get_book')
async def process_get_book(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üîª –ù–∞—á–∏–Ω–∞–µ–º. –£–∫–∞–∂–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    # –¢—É—Ç –ø–æ–π–¥—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞

# --- –ó–ê–ü–£–°–ö ---
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
