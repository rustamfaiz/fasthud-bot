import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class PurchaseStates(StatesGroup):
    choosing_region = State()
    entering_promocode = State()
    confirming_promocode = State()
    waiting_for_payment = State()
    collecting_user_data = State()
    generating_pdf = State()

def start_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="get_book")],
        [InlineKeyboardButton(text="üéØ –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–∑ —ç—Ç–æ–π –∫–Ω–∏–≥–∏", callback_data="book_details")]
    ])

def region_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data="region_ru")],
        [InlineKeyboardButton(text="üåç –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã", callback_data="region_world")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

@dp.message(F.text, commands=["start"])
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é. –ù–æ–≤—ã–π –∑–∞—Ö–æ–¥. –û—á–µ—Ä–µ–¥–Ω–æ–π —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤ –∂–∏—Ä–∞...

‚¨áÔ∏è –ñ–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É¬ª.",
        reply_markup=start_keyboard()
    )

@dp.callback_query(F.data == "get_book")
async def on_get_book(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PurchaseStates.choosing_region)
    await callback.message.edit_text(
        "–£–∫–∞–∂–∏ —Ä–µ–≥–∏–æ–Ω ‚Äî –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.",
        reply_markup=region_keyboard()
    )

@dp.callback_query(F.data == "book_details")
async def on_book_details(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìò –ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–∑ —ç—Ç–æ–π –∫–Ω–∏–≥–∏:

"
        "‚Äî –í—Å—é –ø—Ä–∞–≤–¥—É –æ –¥–∏–µ—Ç–∞—Ö
"
        "‚Äî –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω
"
        "‚Äî –ü–∏—Ç–∞–Ω–∏–µ –±–µ–∑ –≥–æ–ª–æ–¥–∞
"
        "‚Äî –û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∂–∏—Ä
"
        "‚Äî –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ 4 –º–µ—Å—è—Ü–∞
"
        "‚Äî –ö–∞–∫ —É–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"
        "‚Äî –ù–æ–≤–æ–µ —Ç–µ–ª–æ

‚¨áÔ∏è –ì–æ—Ç–æ–≤? –ñ–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É¬ª.",
        reply_markup=start_keyboard()
    )

@dp.callback_query(F.data == "back_to_start")
async def on_back_to_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚¨Ö –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ.", reply_markup=start_keyboard())

@dp.callback_query(F.data.startswith("region_"))
async def on_region_chosen(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split("_")[1]
    await state.update_data(region=region)
    await callback.message.edit_text(f"‚úÖ –†–µ–≥–∏–æ–Ω –≤—ã–±—Ä–∞–Ω: {region.upper()}.
üîú –î–∞–ª—å—à–µ ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())